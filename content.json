[{"title":"Unix-like 命令","date":"2017-02-09T12:27:57.368Z","path":"2017/02/09/类linux配置/","text":"#新手centos 配置 （*nix） ##创建新用户 1234567891011121314两个重要文件 passwd 和 groupuseradd fanhehe &lt;创建新用户&gt; -d /home/fanhehe 指定用户主目录 -g ######### 指定用户组 -G ######### 指定从属多个用户组 -s /bin/zsh 指定登录shell userdel fanhehe &lt;删除用户&gt; usermod fanhehe &lt;修改用户信息&gt; 配置同上 -e MM/DD/YY 设置用户有效期 passwd fanhehe &lt;修改密码&gt;``` ##zsh 查看当前所使用的shell echo $SHELL 查看当前bin下是否有zsh cat /etc/shells 安装zsh sudo yum install zsh0 切换shell chsh -s /bin/zsh 重启 12##oh-my-zsh git : sudo yum -y install git oh-my-zsh : wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 1##vim 安装 vim 配置 curl http://j.mp/spf13-vim3 -L -o - | sh ``` 引用 vim 配置 oh-my-zsh","tags":[]},{"title":"CSS特殊性、权重、重叠规则","date":"2017-02-09T12:27:26.263Z","path":"2017/02/09/CSS重叠规则/","text":"当存在冲突的时候，具有最高特殊性的声明就会胜出。 选择器的特殊性由选择器本身的组件确定。分成4个部分0.0.0.0. 特殊性计算规则： 1.每存在一个ID，加0.1.0.0. 2.类属性、属性选择器、伪类选择器，加0.0.1.0. 3.各个元素和伪元素加0.0.0.1. 4.结合符和通配选择器对特殊性没有贡献 eg : div#sidebar *[href] {color : #efefefe} // specificity = 01111 1234QA1 : 1.0.0.0是CSS2.1为内联样式预留的QA2 : 重要性(!important) : p.dark &#123;color : #333 !important; background-color : red;&#125;QA3 : 继承(inherit) : 不会继承的标签很少 :一般大多数 框架模型的属性包括(border、padding、margin、background)不会被继承继承的特殊性为0，而通配符的特殊性为0，通配符往往覆盖继承的属性。 权重声明 (从大到小): 读者的重要声明 &gt; 创作人员 的重要声明 &gt; 创作人员的正常生命 &gt; 读者的正常声明 &gt; 用户代理声明(理论上，任何声明都会超过代理声明)计算样式的时候 顺序 1.按照权重声明。2.按照特殊性排序。3.真正排序。","tags":[]},{"title":"像素简介","date":"2017-02-09T12:27:26.263Z","path":"2017/02/09/像素/","text":"`像素 ： 物理像素，css像素PPI pixel per inch 像素密度，值越高，图像越清晰，点阵显示器每个像素包括3个子像素(r,g,b)当页面放大的时候，device-width没变，css width值没变 : 是css的像素值变了，即css像素和device像素之间的对应关系扩大了。(fn关系)CSS 像素值永远是一个相对值 。 PPI的像素值 指的是device像素(物理像素)计算PPI : 总像素数/总面积 = 长像素数/长 = 宽像素数/宽 (长和宽方向的分量都一样)如何表达和判断物理像素和CSS像素不平等：window.devicePiexelRatio = physical pixels / dips(dips = device-independent pixels ：CSS像素) 放大时ratio会随之 改变dppx = dots per pixel 微观描述每个像素的点阵数dpi 当讨论一台设备的像素密度的时候，dpi和ppi所形容的是同一个意思。都是像素密度(每英寸的像素数)。但是当媒体查询的时候则应该使用dppx 。但是当媒体查询的时候则应该使用dppx。 默认，body的宽度是html的100% ，而html的宽度是浏览器的100%但是实际上，默认html的宽度是视口的100% ：viewport。 在desktop上viewport = 浏览器宽度。 但是在移动端不成立，因为大部分手机的分辨率差不多400px。例如IPhone的safari上以980px绘制页面。此时可以通过 修改 而content 以‘,’分割属性。其中device-width不代表物理像素值而是CSS分辨率数值。 viewport = layout viewport + visualport ; DPI PPI 意味什么？如果不被打印出来，形成图片的话什么都不意味着。 印刷的原理是通过半色调技术CMYK.`","tags":[]},{"title":"蝴蝶书-After Reading","date":"2017-02-09T12:27:26.263Z","path":"2017/02/09/蝴蝶书/","text":"Object.hasOwnProperty(obj) :对象是否有自己的属性，区分自身和继承来的 ##delete :delete 可以删除对象自身属性，却无法删除原型链上的属性和普通变量。由此可以判断出是否是原型链上的属性eg : var obj = {a : 1}; delete obj.a; ##Function函数创建的时候附有两个附加属性 : 函数上下文和实现函数行为的代码(compared with pure object);Function.prototype.constructor === Function ///true ###四种函数调用模式 : 方法调用模式、函数调用模式、构造器调用模式、apply调用模式。(初始化this值存在差异)this绑定发生在函数调用的时候。(very late binding) ####方法调用模式 ： 函数作为对象的方法时，this被绑定到对象上。 ####函数调用模式 ： 函数不是对象的属性时，this被绑定到全局对象上。(嵌套函数可通过var that = this 访问外部this) ####构造器调用模式 ： new Fucntion()生成对象 时，this绑定到新生成的对象上，并隐藏[[proto]]连接到Function.prototype。new 前缀会改变 return 的行为。var Q = function(){this.a=1;return this.b=2;}; new Q(); ####Apply调用模式 ： 改变this的指向并可以传入参数数组。 ##作用域 ：控制变量参数的可见范围和生命周期，它影响着命名冲突和自动垃圾清理。 ##RegExp : ###RegExp的三种方法 : RegExp.exec(), RegExp.test();123RegExp.test() ：最简单和最快的 ---&gt; true or falseRegExp.exec() : 最强大和最慢的 ---&gt; var tag = /[0-9]/g , loop tag.exec(&quot;123&quot;) [&quot;1&quot;],[&quot;2&quot;],[&quot;3&quot;],nullRegExp.compile() : 已废弃 ###String 中的方法 : String.match(), String.replace(), String.search(), String.split();12345String.match() : 无g和exec相同, 有g则返回所有匹配的字符串数组。String.search(RegExp) : 找到出现的首次出现的位置否则返回-1，自动忽略g。String.split(separator, limit) : 分割为数组，limit控制分割数量。String.replace(oldValue,replaceValue) : 替换掉原来的value。","tags":[]},{"title":"图解CSS3核心技术与实战","date":"2017-02-09T12:23:43.053Z","path":"2017/02/09/图解CSS3核心技术与实战/","text":"#图解CSS3核心技术与实战 Selector###Property 基本选择器 层次选择器 伪类选择器 伪元素选择器 属性选择器 ###Syntax12345678910111213141516171819202122232425-基本选择器 ==&gt; [&quot;ID&quot;,&quot;通配&quot;,&quot;元素&quot;,&quot;类&quot;].map((str)=&gt;str+&quot;选择器&quot;);-层次选择器 ==&gt; &#123; &quot;E F&quot; : &quot;匹配位于E中的F&quot;, &quot;E &gt; F&quot; : &quot;匹配是父元素是E的F&quot;, &quot;E + F&quot; : &quot;匹配在E后的第一个同胞F&quot;, &quot;E ~ F&quot; : &quot;匹配位于E后的所有F&quot; &#125;-伪类选择器 ==&gt; &#123; &quot;动态伪类&quot; : [&quot;:link&quot;,&quot;:visited&quot;,&quot;:active&quot;,&quot;:hover&quot;,&quot;:focus&quot;] &quot;目标伪类&quot; : [&quot;:target&quot;] &quot;语言伪类&quot; : [&quot;:lang&quot;] &quot;UI 伪类&quot; : [&quot;:checked&quot;,&quot;:checked&quot;,&quot;:disabled&quot;] &quot;结构伪类&quot; : [&quot;:nth-child(n)&quot;,&quot;:nth-of-type(n)&quot;,&quot;:root&quot;,&quot;:empty&quot;] &quot;否定伪类&quot; : [&quot;:not([type=submit])&quot;]&#125;-伪元素选择器 ==&gt; [&quot;::first-letter&quot;,&quot;::before&quot;,&quot;::selection&quot;]-属性选择器 ==&gt; &#123; &quot;E[attr]&quot; : &quot;匹配具有attr属性的E&quot;， &quot;E[attr=val]&quot; : &quot;匹配attr属性值为val的E&quot;, &quot;E[attr|^~*&amp;=val]&quot; : &quot;正则表达式&quot;&#125; Border###Property border-color border-image border-radius box-shadow ###Syntax 12345678-border-image ==&gt; border-image : none | &lt;image&gt; [&lt;number&gt;|&lt;percentage&gt;]&#123;1,4&#125; [/&lt;border-width&gt;&#123;1,4&#125;] ?[stretch|repeat |round]&#123;0,2&#125; -border-radius ==&gt; border-radius : none | &lt;length&gt; &#123;1,4&#125; [/&lt;length&gt; &#123;1,4&#125;]-box-shadow ==&gt; box-shadow : none | [&lt;length&gt;&lt;length&gt;&lt;length&gt;?&lt;length&gt;? ||&lt;color&gt;] [,&lt;length&gt;&lt;length&gt;&lt;length&gt;?&lt;length&gt;? ||&lt;color&gt;]+ box-shadow : none | [inset x-offset y-offset blur-radius spread-radius color],[inset x-offset y-offset blur-radius spread-radius color]+ ##Background ###Property ####CSS2.1 background-color background-image background-repeat background-attachment //背景是否随页面滚动 background-position //背景位置 ####CSS3 background-origin //指定背景图片起点(-position起始参照点) background-clip //从…裁剪背景图片 background-size //背景图片尺寸大小 background-break //内联元素背景图平铺的循环方式(不常有) ##Syntax12345678910-color : [&quot;#fff&quot;,&quot;red&quot;,&quot;rgba()&quot;,&quot;hls()&quot;]-image : [&quot;ulr()&quot;]-repeat : [&quot;repeat&quot;,&quot;x/y-repeat&quot;,&quot;no-repeat&quot;]-attachment : [&quot;scroll&quot;,&quot;fixed&quot;]-position : [&quot;(50% 50%)&quot;,&quot;(center center)&quot;]-origin : [&quot;padding-box&quot;,&quot;border-box&quot;,&quot;content-box&quot;]-clip : [&quot;padding-box&quot;,&quot;border-box&quot;,&quot;content-box&quot;,&quot;text&quot;]-size : [&quot;cover&quot;,&quot;contain&quot;,&quot;auto&quot;,&quot;100%&quot;,&quot;20px&quot;]-break : [&quot;bounding-box&quot;,&quot;each-box&quot;,&quot;continuous&quot;] 12345background : [&lt;background-color&gt;] [,&lt;background-image&gt;][,&lt;background-repeat&gt;] [,background-attachment][,background-position]background-position : &lt;percentage&gt;||&lt;length&gt;||[left|center|right] [,top|center|bottom]background-size : auto || &lt;length&gt; || &lt;percentage&gt; ||cover ||contain ##Text1Text --&gt; Color --&gt; Box --&gt; Flex --&gt; Columns --&gt; ##Gradient ###Property linear-gradient radial-gradient repeating-linear-gradient repeating-radial-gradient ###Syntax123456789101112131415161718192021 : linear-gradient([[&lt;angle&gt;|to &lt;side-or-corner&gt;],]?&lt;color-stop&gt;[,&lt;color-stop&gt;]+)--------------------------------------------------------------------------- - &lt;angle&gt; : 0deg(↑) || 90deg(→)... - to &lt;side-or-corner&gt; : to top(↑) || to top left(↖) - &lt;color-stop&gt; : #123 [d%]? || rgba() || hsla()--------------------------------------------------------------------------- : radial-gradient([[&lt;shape&gt;||&lt;size&gt;] [at &lt;position&gt;]?, | at &lt;position&gt;,]?&lt;color-stop&gt;[,&lt;color-stop&gt;]+); --------------------------------------------------------------------------- - &lt;shape&gt; : circle || ellipse - &lt;size&gt; : closest-side || closest-corner || &lt;length&gt; || &lt;percentage&gt; || ... - &lt;position&gt; : &lt;length&gt; || &lt;percentage&gt; || left right || ... - &lt;color-stop&gt; : #123 [d%]? || rgba() || hsla() --------------------------------------------------------------------------: repeating-linear-gradient 参数与linear-gradient类型: repeating-radial-gradient 参数与linear-gradient类型-------------------------------------------------------------------------- ###Examples12345678910111213141516171819202122background-image : linear-gradient( to left, /*270deg*/ rgb(255,0,0) 33%, rgb(0,255,0) 66%, rgb(0,0,255) 100% ); background-image : radial-gradient( 50px 100px at 200px 150px,/*x-r y-r at (x,y)*/ hsla(120,70%,60%,.6), hsla(240,70%,60%,.9) );background-image : radial-gradient( 40% 80% at 50% 50%,/*x-r y-r at (50%,50%)*/ hsla(120,70%,60%,.6), hsla(240,70%,60%,.9) );background-image : repeating-linear-gradient(red,green 40px, orange 80px);background-image : repeating-radial-gradient(red,green 40px, orange 80px); ##Transform ###Property translate rotate scale skew ###Syntax1234-translate : translate(标准单位) translateX/Y/Z/3d()-scale : scale(0-1) scaleX/Y/Z/3d()-rotate : rotate(deg) rotateX/Y/3d()-skew : skew(deg) skewX/Y() transform 12transform : none | &lt;transform-function&gt; [&lt;transform-function&gt;]* 叠加效果一般都是用逗号隔开，而transform则用空格分隔开。 1234567-transform-origin : 元素变换的参照位置 (类似 background-position)-transform-origin-z : 3d元素变换的参照位置-transform-style : preserve-3d || flat 建立3d渲染环境-perspective : none || &lt;length&gt; 视距 父元素上-perspective(&lt;length&gt;) : 激活3d舞台 当前元素上。-perspective-origin : 视距的参照位置 (类似 background-position)-backface-visibility : visible || hidden 背面是否可见 ##Examples 123456789101112131415161718192021222324&lt;style&gt; .wrap&#123; position : relative; transform-style: preserve-3d;/*开启3D效果这个才是重点*/ perspective: 200px;/*这个只是设置视距，虽然影响最终效果但是不影响过程*/ &#125; .wrap img&#123; width : 40%; background-color : red; position : absolute; &#125; .wrap img:first-of-type&#123; z-index : 3; transition : all 5s ease-in-out; &#125; #front:hover&#123; transform : rotate3d(.2, .4, .6, 360deg) translateZ(-100px) skew(90deg) scale(1.5); transform-origin : right bottom; /*过程改变，结果不变*/ &#125;&lt;/style&gt;&lt;div class=&quot;wrap&quot;&gt; &lt;img src=&quot;./images/transform-function.jpg&quot; alt=&quot;&quot; id=&quot;front&quot; /&gt; &lt;img src=&quot;./images/transform-function.jpg&quot; alt=&quot;&quot; id=&quot;back&quot; /&gt;&lt;/div&gt; transform-example ##Transition ###Property transition-property transition-duration transition-timing-function transition-delay ###Syntax12345678-transition : [&lt;transition-property&gt; || &lt;transition-duration&gt; || &lt;transition-timing-function&gt; || &lt;transition-delay&gt; [,&lt;transition-property&gt; || &lt;transition-duration&gt; || &lt;transition-timing-function&gt;]*]-transition-property : none || all || [与颜色长度有关的属性]-transition-duration : [s,ms]-transition-timing-function : linear || ease ||ease-in-out || cubic-bezier(p0,p1,p2,p3) || step() step() : step(&lt;integer&gt;[,[start|end]]?) step(7, end) //分成七段，动画的结束发现在最后一步。-transition-delay : [s,ms] //因为 duration 和 delay 都是时间，浏览器认为第一个数字是duration，第二个是delay ##Animation ###Property animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-play-state animation-fill-mode @keyframes ###Syntax ####Animation-syntax12345678910111213 animation : [&lt;animation-name&gt; || &lt;animation-duration&gt; || &lt;animation-timing-function&gt; || &lt;animation-delay&gt; || &lt;animation-iteration-count&gt; || &lt;animation-direction&gt; || &lt;animation-play-state&gt; || &lt;animation-fill-mode&gt;] * eg : animation : ani1 2s step(20,end) infinite alternate backwards,...;--------------------------------------------------------------------------- animation-name : none || name //name 与keyframes的名字一致。 animation-duration : [s, ms] //持续时间 animation-timing-function : //与transition-timing-function一致 animation-delay : [s, ms] //延迟时间 animation-iteration-count : infinite || times //无限或者times次 animation-direction : normal || alternate //al : 偶数次向前播放，奇数次向后播放 animation-play-state : running || paused //暂停或者开始播放 animation-fill-mode : none || forwards || backwards || both //动画结束回不回到初始帧 ####keyframes-syntax1234567891011121314151617181920@keyframes name&#123; from &#123; /* css part*/ &#125; to &#123; /* css part*/ &#125;&#125;or@kayframes name&#123; 0% &#123; /* css part*/ &#125; 20% &#123; /* css part*/ &#125; 100% &#123; /* css part*/ &#125;&#125; 附:正则表达式","tags":[]}]